NAME
    Net::Domain::PublicSuffix - Fast XS implementation of public_suffix and
    base_domain

SYNOPSIS
     use Net::Domain::PublicSuffix qw(base_domain public_suffix);

     my $d1 = base_domain("www.foo.com");
     # $d1 eq "foo.com"

     my $d2 = base_domain("www.smms.pvt.k12.ca.us");
     # $d2 eq "smms.pvt.k12.ca.us"

     my $d3 = base_domain("www.whitbread.co.uk");
     # $d3 eq "whitbread.co.uk"

     my $d5 = base_domain("www.foo.bar");
     # $d5 eq "foo.bar"

     my $d6 = public_suffix("www.foo.zz");
     # $d6 eq "" because .zz is not a valid TLD

DESCRIPTION
    Net::Domain::PublicSuffix finds the public suffix, or top level domain
    (TLD), of a given hostname name.

  $tld = base_domain($hostname)
    Given a hostname return the TLD (top level domain).

    This function is more permissive than public_suffix in that it will
    always try to return a reasonable answer. public_suffix return an answer
    even when the given hostname does not have a valid TLD (for example
    www.foo.xx returns foo.xx) or is missing a required sub domain (for
    example ak.cy returns the incomplete ak.cy).

  $bool = has_valid_tld($hostname)
    Returns true id the domain of the provided string exists in the list of
    valid top level domains. The list of valid domains is

  @tld_list = all_valid_tlds();
    Return a list of all valid top level domains.

  $public_suffix = public_suffix($hostname)
    public_suffix is the same as base_domain run in strict mode.

    base_domain() will treat truncated TLDs as valid. For instance
    base_domain("com.bd") will return "com.bd" but public_suffix("com.bd")
    will return "" (empty string) because the TLD rules stipulates there
    should be a third level (i.e. "foo.com.bd") to be valid. The reason
    base_domain is more permissive is that in the real world, non-standard
    TLDs get assigned all the time.

    public_suffix() is not an exact replacement for Mozilla::PublicSuffix.
    See the tests run in publicsuffix.t for noteable differences. I think
    some of thes test from publicsuffix.org are just wrong. For instance,
    publicsuffix.org thing that "example.example" (a non-existance TLD)
    should pass, but "test.om" (a non-existant second level domain for the
    valid TLD om) should not.

  gen_basedomain_tree()
    Initialize the base domain trie. This function will get called the first
    time base_domain() is called. This function is made public so that the
    trie can be initialized manually before any time critical code.

Rule Data
    The list of TLD rules is generated primarily from the Public Suffic list
    from publicsuffix.org and can be found at
    https://publicsuffix.org/list/effective_tld_names.dat

    Previously rules were generated from the list in the Mozilla source
    http://lxr.mozilla.org/mozilla/source/netwerk/dns/src/effective_tld_name
    s.dat?raw=1 The publicsuffix.org list now supersceeds the Mozilla list.

    Additional reasearch was done via the Wikipedia (for example
    http://en.wikipedia.org/wiki/.uk ) and by consulting the actual NICs
    that assign domains (for example http://www.kenic.or.ke/ ).

  .us rules
    The United States of America have some unique rule formats (see
    http://en.wikipedia.org/wiki/.us ). Including wildcards in the middle of
    the TLD. For example in the pattern ci.<locality>.<state>.us, <state> is
    one of a fixed set of valid state abreviations, but <locality> is
    effectively a wildcard city/town/county/etc, followed by a fixed list of
    oranizational types (ci, town, vil, co).

    The Mozilla Public Suffix implementation ignores these patterns and just
    adds all the known combinations via brute force. This package honors
    wildcards mid-pattern.

  Differences with Mozilla's PublicSuffix
    There are some rules that Basedomain know about thant PublicSuffix. This
    is due to additional research. For instance
    http://en.wikipedia.org/wiki/.mt lists gov.mt as a valid TLD, but it is
    missing from the publicsuffix.org list.

    These rule lists are kept seperate in the code to make future upgrades
    easier. There are three lists: @special_rules for these additional
    missing rules, @publicsuffix_rules that are autogenerated from the
    publicsuffix.org list.

    Basedomain does not honor the "!" exception rules because there are very
    few of them (19 at current count) and the impact on real word is
    negligable. It is on the todo list to add support for "!" excpetion
    rules for the public_suffix() strict mode.

    Basedomain does not support punycode hostnames. Hostnames need to be
    decoded before calling base_domain().

AUTHOR
     Blekko.com

SEE ALSO
    Mozilla::PublicSuffix, Domain::PublicSuffix,
    IO::Socket::SSL::PublicSuffix, ParseUtil::Domain, Net::Domain::Match

    Of which Domain::PublicSuffix gets the answers right most of the time.
    The rest do not work for much more than the examples they provide, if
    any.

    Net::IDN::Punycode, Net::IDN::Encode, IDNA::Punycode,

